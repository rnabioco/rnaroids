
""" rules for two pass mapping """

starPARS = """ \
  --outFilterMultimapNmax 10 --outFilterMismatchNmax 10 --outFilterMismatchNoverReadLmax 0.04 \
  --outSAMmultNmax 1 --outMultimapperOrder Random  --outSAMprimaryFlag AllBestScore \
  --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 \
  --alignSJoverhangMin 8  --alignSJDBoverhangMin 1 --sjdbScore 1 \
  --outFilterType BySJout \
  --outSAMtype BAM SortedByCoordinate --outSAMmode Full \
  --outSAMattributes All  --outSAMattrIHstart 0  --outSAMstrandField intronMotif  \
  --outWigType bedGraph  --outWigNorm RPM \
  --quantMode GeneCounts --readFilesCommand zcat \
  """
starPARS_dedup = """ \
  --outFilterMultimapNmax 10 --outFilterMismatchNmax 10 --outFilterMismatchNoverReadLmax 0.04 \
  --outSAMmultNmax 1 --outMultimapperOrder Random  --outSAMprimaryFlag AllBestScore \
  --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 \
  --alignSJoverhangMin 8  --alignSJDBoverhangMin 1 --sjdbScore 1 \
  --outReadsUnmapped Fastx --outFilterType BySJout \
  --outSAMtype BAM SortedByCoordinate --outSAMmode Full \
  --outSAMattributes All  --outSAMattrIHstart 0  --outSAMstrandField intronMotif  \
  """

rule extract_deduped_fastqs:
    """
    convert reads back to fastq for second pass mapping
    read ids will have /1 and /2 appended
    samtools 1.5
    """
    input:
      bam = "{data}/star/dedup/{sample}_dedup.bam",
    output:
      R1 = "{data}/fastq/dedup/{sample}_R1.fastq.gz",
      R2 = "{data}/fastq/dedup/{sample}_R2.fastq.gz",
      singles = "{data}/fastq/dedup/{sample}_singletons.fastq.gz",
    params:
      fq = "{data}/fastq/dedup/{sample}.fastq",
      job_name = "makefq.{sample}",
      memory = "select[mem>4] rusage[mem=4]",
    log:
      "{data}/fastq/logs/dedup/{sample}_makefastq.txt"
    message:
      "converting deduplicated bam back to fastq"
    resources: all_threads=4
    threads: 4
    shell:
      """
      samtools fastq \
        -0 {output.singles} \
        -1 {output.R1} \
        -2 {output.R2} \
        -@ 3 \
        {input.bam}
      """

def aggregate_chrom_bams(wildcards):
    out = expand("{data}/star/dedup/{sample}/dedup_split_{chrom}_{sample}.bam", 
                   chrom = CHROMS, 
                   data = wildcards.data, 
                   sample = wildcards.sample)
    return(out)

rule combine_bams:
    """
    combined deduplicated chromosome bams
    samtools cat 
    """
    input:
      bam = aggregate_chrom_bams, 
    output:
      bam = protected("{data}/star/dedup/{sample}_dedup.bam"), 
    params:
      job_name = "dedup.combine.{sample}",
      memory = "select[mem>12] rusage[mem=12]",
    log:
      "{data}/star/logs/dedup/{sample}_dedup_combine.txt"
    resources: all_threads=1
    message:
      "combining per chromosome {wildcards.sample} bam files"
    shell:
      """
      # combine and sort by read name so pairs are together for conversion back to fastq
      samtools cat {input.bam} \
        | samtools sort -n -o {output.bam}
      """

rule dedup_bam:
    """
    deduplicate reads
    umi_tools version 4.4
    use python3/3.6.1
    """
    input:
      bam = "{data}/star/firstpass/{sample}.bam",
    output:
      bam = temp("{data}/star/dedup/{sample}/dedup_split_{chrom}_{sample}.bam"), 
    params:
      job_name = "dedup_bams",
      memory = "select[mem>12] rusage[mem=12]",
    log:
      "{data}/star/logs/dedup/{sample}_{chrom}_dedup.txt"
    resources: all_threads=1
    message:
      "deduplicating chromosome {wildcards.chrom} from {wildcards.sample} bam file"
    shell:
      """
      module load python3 #needed for load umi_tools 
      # use updated v4.4
      umitools="/vol1/software/modules-python/python3/3.6.1/bin/umi_tools"
      $umitools dedup \
        --method="directional" \
        --paired \
        --chrom={wildcards.chrom} \
        -v 1 \
        -L {log} \
        -I {input} \
        -S {output.bam}
      """

rule star_align:
    """ map reads to genome/transcriptome using STAR 
    STAR_2.5.1b
    """
    input:
      R1 = "{data}/fastq/filtered/{sample}_R1_umi_trim_noercc.fastq.gz",
      R2 = "{data}/fastq/filtered/{sample}_R2_umi_trim_noercc.fastq.gz",
      genome = GENOME_DIR + "/Genome"
    output:
      bam = "{data}/star/firstpass/{sample}.bam",
      bg1 = "{data}/star/firstpass/{sample}_Signal.Unique.str1.out.bg",
      bg2 = "{data}/star/firstpass/{sample}_Signal.Unique.str2.out.bg"
    params:
      use_sjs =  "yes" if SPLICE_JUNCTS else "no", 
      splice_junctions = SPLICE_JUNCTS if SPLICE_JUNCTS else "none",
      job_name = "star_pass_1",
      tmpbam = "{data}/star/firstpass/{sample}_Aligned.sortedByCoord.out.bam",
      out = "{data}/star/firstpass/{sample}_",
      memory = "select[mem>60] rusage[mem=60]",
    log:
      "{data}/star/logs/firstpass/{sample}_align.txt"
    message:
      "running first pass star alignments "
    threads:
      12
    resources: all_threads=12
    shell:
      """
      # use bash to conditionally define --sjdbFileChrStartEnd
      
      if [ "{params.use_sjs}" != "no" ]
      then
         sjunctions="--sjdbFileChrStartEnd {params.splice_junctions} "
      else
         sjunctions=""
      fi 

      STAR \
        --genomeDir {GENOME_DIR}  \
        --runThreadN {threads} \
        --outBAMsortingThreadN {threads} \
        --readFilesIn {input.R1} {input.R2} \
        --readFilesCommand gunzip -c \
        --outFileNamePrefix {params.out} \
        --outFilterMultimapNmax 10 --outFilterMismatchNmax 10 --outFilterMismatchNoverReadLmax 0.04 \
        --outSAMmultNmax 1 --outMultimapperOrder Random  --outSAMprimaryFlag AllBestScore \
        --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 \
        --alignSJoverhangMin 8  --alignSJDBoverhangMin 1 --sjdbScore 1 \
        --outReadsUnmapped Fastx --outFilterType BySJout \
        --outSAMtype BAM SortedByCoordinate --outSAMmode Full \
        --limitSjdbInsertNsj=1500000 \
        --outSAMattributes All  --outSAMattrIHstart 0  --outSAMstrandField intronMotif \
        --outWigType bedGraph  --outWigNorm RPM --quantMode GeneCounts \
        $sjunctions

      # add XS tag for non-spliced alignments using awkful script from STAR 
      samtools view -h {params.tmpbam} \
        | awk -v strType=2 -f {SRC}/tagXSstrandedData.awk \
        | samtools view -bS - > {output.bam}
      
      samtools index {output.bam}
      
      rm -f {params.tmpbam}
      """

