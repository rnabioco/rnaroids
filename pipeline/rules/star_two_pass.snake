
""" rules for two pass mapping """

starPARS = """ \
  --outFilterMultimapNmax 10 --outFilterMismatchNmax 10 --outFilterMismatchNoverReadLmax 0.04 \
  --outSAMmultNmax 1 --outMultimapperOrder Random  --outSAMprimaryFlag AllBestScore \
  --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 \
  --alignSJoverhangMin 8  --alignSJDBoverhangMin 1 --sjdbScore 1 \
  --outFilterType BySJout \
  --outSAMtype BAM SortedByCoordinate --outSAMmode Full \
  --outSAMattributes All  --outSAMattrIHstart 0  --outSAMstrandField intronMotif  \
  --outWigType bedGraph  --outWigNorm RPM \
  --quantMode GeneCounts --readFilesCommand zcat \
  """
starPARS_dedup = """ \
  --outFilterMultimapNmax 10 --outFilterMismatchNmax 10 --outFilterMismatchNoverReadLmax 0.04 \
  --outSAMmultNmax 1 --outMultimapperOrder Random  --outSAMprimaryFlag AllBestScore \
  --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 \
  --alignSJoverhangMin 8  --alignSJDBoverhangMin 1 --sjdbScore 1 \
  --outReadsUnmapped Fastx --outFilterType BySJout \
  --outSAMtype BAM SortedByCoordinate --outSAMmode Full \
  --outSAMattributes All  --outSAMattrIHstart 0  --outSAMstrandField intronMotif  \
  """

#rule idx_bams_out:
#   input:
#     "{data}/star/{fastq}_2pass_Aligned.sortedByCoord.out.bam"
#   output:
#     protected("{data}/star/{fastq}_2pass_Aligned.sortedByCoord.out.bam.bai")
#   params:
#     job_name = "idx_bam",
#     memory = "select[mem>10] rusage[mem=10]",
#   log:
#     "{data}/star/logs/{fastq}_index.txt"
#   shell:
#     "samtools index {input}"
#
#
rule star_second_pass:
   input:
     R1 = "{data}/fastq/dedup/{sample}_{rep}_R1.fastq.gz",
     R2 = "{data}/fastq/dedup/{sample}_{rep}_R2.fastq.gz",
     junctions = expand("{data}/star/firstpass/{sample}_{rep}_SJ.out.tab",
       data=DATA, sample=SAMPLE, rep=REP),
     first_bam = "{data}/star/firstpass/{sample}_{rep}.bam",
   output:
     bam = protected("{data}/star/secondpass/{sample}_{rep}_2pass.bam")
   params:
     job_name = "star_pass_2",
     tmpbam = "{data}/star/secondpass/{sample}_{rep}_2pass_Aligned.sortedByCoord.out.bam",
     out = "{data}/star/secondpass/{sample}_{rep}_2pass_",
     memory = "select[mem>60] rusage[mem=60]",
   log:
     "{data}/star/logs/secondpass/{sample}_{rep}_align.txt"
   message:
     "running second pass star alignments "
   threads:
     12
   shell:
     """
     module load star
     STAR \
       --genomeDir {GENOME_DIR}  \
       --runThreadN {threads} \
       --outBAMsortingThreadN {threads} \
       --readFilesIn {input.R1} {input.R2} \
       --readFilesCommand gunzip -c \
       --outFileNamePrefix {params.out} \
       --sjdbFileChrStartEnd {input.junctions} \
       --outFilterMultimapNmax 10 --outFilterMismatchNmax 10 --outFilterMismatchNoverReadLmax 0.04 \
       --outSAMmultNmax 1 --outMultimapperOrder Random  --outSAMprimaryFlag AllBestScore \
       --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 \
       --alignSJoverhangMin 8  --alignSJDBoverhangMin 1 --sjdbScore 1 \
       --outReadsUnmapped Fastx --outFilterType BySJout \
       --outSAMtype BAM SortedByCoordinate --outSAMmode Full \
       --outSAMattributes All  --outSAMattrIHstart 0  --outSAMstrandField intronMotif  
      
     # add XS tag for non-spliced alignments using awkful script from STAR 
     samtools view -h {params.tmpbam} \
       | awk -v strType=2 -f {SRC}/tagXSstrandedData.awk \
       | samtools view -bS - > {output.bam}
     
     samtools index {output.bam}
     
     rm -f {params.tmpbam}
     module unload star
     """


rule extract_deduped_fastqs:
    """
    convert reads back to fastq for second pass mapping
    read ids will have /1 and /2 appended
    samtools 1.5
    """
    input:
      bam = "{data}/star/dedup/dedup_{sample}_{rep}.bam",
    output:
      R1 = "{data}/fastq/dedup/{sample}_{rep}_R1.fastq.gz",
      R2 = "{data}/fastq/dedup/{sample}_{rep}_R2.fastq.gz",
      singles = "{data}/fastq/dedup/{sample}_{rep}_singletons.fastq.gz",
    params:
      fq = "{data}/fastq/dedup/{sample}_{rep}.fastq",
      job_name = "makefq.{sample}.{rep}",
      memory = "select[mem>4] rusage[mem=4]",
    log:
      "{data}/fastq/logs/dedup/{sample}_{rep}_makefastq.txt"
    message:
      "converting deduplicated bam back to fastq"
    threads: 4  
    shell:
      """
      samtools fastq \
        -0 {output.singles} \
        -1 {output.R1} \
        -2 {output.R2} \
        -@ 3 \
        {input.bam}
      """

rule dedup_bam:
    """
    deduplicate reads
    umi_tools
    """
    input:
      bam = "{data}/star/firstpass/{sample}_{rep}.bam",
    output:
      bam = "{data}/star/dedup/dedup_{sample}_{rep}.bam",
    params:
      bam = "{data}/star/dedup/unsorted_dedup_{sample}_{rep}.bam",
      job_name = "dedup.{sample}.{rep}",
      memory = "select[mem>12] rusage[mem=12]",
    log:
      "{data}/star/logs/dedup/{sample}_{rep}_dedup.txt"
    message:
      "deduplicating {wildcards.sample} replicate {wildcards.rep} bam file"
    shell:
      """
      module load python #needed for load umi_tools 

      umi_tools dedup \
        --method="directional-adjacency" \
        --paired \
        -v 2 \
        -L {log} \
        -I {input.bam} \
        -S {output.bam} 

      # sort by read name so pairs are together for conversion back to fastq
      samtools sort \
        -n {params.bam} \
        -o {output.bam} 
      
      rm -f {params.bam} 
      
      """


rule star_first_pass:
    """ map reads to genome/transcriptome using STAR 
    STAR_2.5.1b
    """
    input:
      R1 = "{data}/fastq/filtered/{sample}_R1_{rep}_umi_trim_noercc.fastq.gz",
      R2 = "{data}/fastq/filtered/{sample}_R2_{rep}_umi_trim_noercc.fastq.gz",
      genome = GENOME_DIR + "/Genome"
    output:
      "{data}/star/firstpass/{sample}_{rep}_SJ.out.tab",
      bam = "{data}/star/firstpass/{sample}_{rep}.bam",
    params:
      job_name = "star_pass_1",
      tmpbam = "{data}/star/firstpass/{sample}_{rep}_Aligned.sortedByCoord.out.bam",
      out = "{data}/star/firstpass/{sample}_{rep}_",
      memory = "select[mem>60] rusage[mem=60]",
    log:
      "{data}/star/logs/firstpass/{sample}_{rep}_align.txt"
    message:
      "running first pass star alignments "
    threads:
      12
    shell:
      """
      module load star
      STAR \
        --genomeDir {GENOME_DIR}  \
        --runThreadN {threads} \
        --readFilesIn {input.R1} {input.R2} \
        --outBAMsortingThreadN {threads} \
        --outFileNamePrefix {params.out} \
        --outFilterMultimapNmax 10 --outFilterMismatchNmax 10 --outFilterMismatchNoverReadLmax 0.04 \
        --outSAMmultNmax 1 --outMultimapperOrder Random  --outSAMprimaryFlag AllBestScore \
        --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 \
        --alignSJoverhangMin 8  --alignSJDBoverhangMin 1 --sjdbScore 1 \
        --outReadsUnmapped Fastx --outFilterType BySJout \
        --outSAMtype BAM SortedByCoordinate --outSAMmode Full \
        --outSAMattributes All  --outSAMattrIHstart 0  --outSAMstrandField intronMotif \
        --readFilesCommand zcat
      
      # add XS tag for non-spliced alignments using awkful script from STAR 
      samtools view -h {params.tmpbam} \
        | awk -v strType=2 -f {SRC}/tagXSstrandedData.awk \
        | samtools view -bS - > {output.bam}
      
      samtools index {output.bam}
      
      rm -f {params.tmpbam}
      module unload star
      """
